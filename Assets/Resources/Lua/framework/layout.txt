layout = class("layout");

function layout:ctor(layoutConig, event)

	self._layoutIndex = event.layoutIndex;
	self._layoutConfig = layoutConig;

	self._layoutPrefabClone = nil;
	
	self._childrenMap = {};
	self._childrenMapNeedUpdate = true;

	self._eventMap = {};

	resourceManager.load("UI/"..self._layoutConfig.prefab, function (object)
		
		self._layoutPrefabClone = UnityEngine.GameObject.Instantiate(object);

		utils.addChild(layoutManager.rootCanvas, self._layoutPrefabClone );

		-- reset position
		utils.setUIOffsetMin(self._layoutPrefabClone, 0, 0);
		utils.setUIOffsetMax(self._layoutPrefabClone, 0, 0);

		self:onRegisterEvent();
		
		self:onShow(event);

	end);

end

function layout:isLoaded()

	return self._layoutPrefabClone ~= nil;

end

function layout:destroy()
	
	self:removeAllEvent();
	
	UnityEngine.GameObject.Destroy(self._layoutPrefabClone);
	self._layoutPrefabClone = nil;

end

function layout:onRegisterEvent()
	-- body
end

function layout:registerEvent(eventName, handle)
	
	eventManager.addEvent(eventName, handle, self);

	table.insert(self._eventMap, {eventName = eventName, handle = handle});

end

function layout:removeAllEvent()

	for k,v in pairs(self._eventMap) do
		
		eventManager.removeEvent(v.eventName, v.handle);

	end

end

-- base class
-- do nothing
function layout:onShow(event)
	
end

-- base class
function layout:onHide(event)
	
end

function layout:getChild(name)
	
	if not self._layoutPrefabClone then
		return nil;
	end

	if self._childrenMapNeedUpdate then
		
		utils.getChildrenMap(self._layoutPrefabClone, self._childrenMap);
		
		self._childrenMapNeedUpdate = false;
	end

	return self._childrenMap[name];
end