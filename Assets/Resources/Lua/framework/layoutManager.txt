layoutManager = {};
-- 注册所有窗口的打开关闭事件
layoutManager.eventMap = {};
-- 根窗口
layoutManager.rootCavas = nil;
-- 所有实例化的窗口
layoutManager.layoutMap = {};

function layoutManager.init()

	layoutManager.registerEvent();
	
	layoutManager.rootCavas = UnityEngine.GameObject.Find("uiManager/Canvas");


end

-- register event
function layoutManager.registerEvent()
	
	for k, v in pairs(gds.uiConfig) do
		
		local showEventName = string.upper(v.name).."_SHOW";
		local hideEventName = string.upper(v.name).."_HIDE";

		print(showEventName);
		print(hideEventName);

		eventManager.addEvent(showEventName, layoutManager.onShowLayout);
		eventManager.addEvent(hideEventName, layoutManager.onHideLayout);

		layoutManager.eventMap[showEventName] = v;
		layoutManager.eventMap[hideEventName] = v;
	end

end

-- on show event
function  layoutManager.onShowLayout( event )
	
	local uiConfig = layoutManager.eventMap[event.name];
	print("onShowLayout"..uiConfig.prefab);

	-- layout的标示，用来创建同一个layout的多个实例
	if event.layoutIndex == nil then
		event.layoutIndex = 1;
	end

	if layoutManager.layoutMap[uiConfig.name] == nil then
		layoutManager.layoutMap[uiConfig.name] = {};
	end

	if layoutManager.layoutMap[uiConfig.name][event.layoutIndex] then
		print("layout already exist! name: "..uiConfig.name.." index: "..event.layoutIndex);
		return;
	end

	local layoutClass = include("ui."..uiConfig.script);
	local layoutInstance = layoutClass.new(uiConfig, event);
	layoutManager.layoutMap[uiConfig.name][event.layoutIndex] = layoutInstance;
	
end

-- on hide event
function layoutManager.onHideLayout( event )

	print("onHideLayout");

end