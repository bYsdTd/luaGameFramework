battleLogic = class("battleLogic")

function battleLogic:ctor()
	
	-- gems logic and input handle
	self._gemsLogic = gemsLogic.new();
	self._gemInputHandler = gemInputHandler.new(self._gemsLogic);

	-- skill logic and input handle
	self._skillLogic = skillLogic.new();
	self._skillInputHandler = skillInputHandler.new(self._gemsLogic);

	-- register event
	self:registerEvent();

	-- hero object
	self._attackHero = heroObject.new();

	self._defenceHero = heroObject.new();

	-- battle player

	self._battlePlayer = battlePlayer.new();

	--
	self._roundType = enum.BATTLE_ROUND_TYPE.NONE;

	-- erase flag, to check if can end round
	self._erasedFlag = false;

end

function battleLogic:getTarget(targetType)

	if self:getRoundType() == enum.BATTLE_ROUND_TYPE.ATTACKER then

		if targetType == enum.TARGET_TYPE.SELF then
		
			return self._attackHero;

		elseif targetType == enum.TARGET_TYPE.OTHER then

			return self._defenceHero;

		end
	else
		
		if targetType == enum.TARGET_TYPE.SELF then
		
			return self._defenceHero;

		elseif targetType == enum.TARGET_TYPE.OTHER then

			return self._attackHero;

		end

	end

	return nil;	

end


function battleLogic:getCurrentHero()

	if self:getRoundType() == enum.BATTLE_ROUND_TYPE.ATTACKER then
		
		return self._attackHero;

	elseif self:getRoundType() == enum.BATTLE_ROUND_TYPE.DEFENDER then
		
		return self._defenceHero;
	
	end

end

function battleLogic:canEndRound()
	
	-- self round and erased 
	return self:getErasedFlag();
	
end

function battleLogic:getErasedFlag()

	-- can player end round
	-- must do one time erase
	return self._erasedFlag;
end

function battleLogic:setErasedFlag(flag)
	
	self._erasedFlag = flag;

end

function battleLogic:getRoundType()

	return self._roundType;

end

function battleLogic:setRoundType(roundType)

	self._roundType = roundType;

end

function battleLogic:destroy( ... )
	
	if self._battlePlayer then
		
		self._battlePlayer:destroy();

		self._battlePlayer = nil;

	end


	if self._gemsLogic then
	
		self._gemsLogic:destroy();

		self._gemsLogic = nil;

	end

	if self._attackHero then
	
		self._attackHero:destroy();

		self._attackHero = nil;

	end

	if self._defenceHero then

		self._defenceHero:destroy();

		self._defenceHero = nil;

	end

	if self._gemInputHandler then
	
		self._gemInputHandler:destroy();

		self._gemInputHandler = nil;

	end

	if self._skillLogic then

		self._skillLogic:destroy();		
		self._skillLogic = nil;

	end

	if self._skillInputHandler then
		
		self._skillInputHandler:destroy();
		self._skillInputHandler = nil;

	end

	self:removeAllEvent();

end

function battleLogic:registerEvent()
	
	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle, self);
	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_SWAP_GEM, self.onHandleMoveGem, self);

	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END, self.onHandleMoveGemEnd, self);

	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_PLAYER_RECORD, self.onHandleRecord, self);
	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_CAST_SKILL_SELECT_GEM, self.onHandelCastSkillSelectGem, self);

end

function battleLogic:removeAllEvent()

	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle);
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_SWAP_GEM, self.onHandleMoveGem);

	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END, self.onHandleMoveGemEnd);
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_PLAYER_RECORD, self.onHandleRecord);
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_CAST_SKILL_SELECT_GEM, self.onHandelCastSkillSelectGem);

end

-- function battleLogic:onHandleRoundType(event)
	
-- 	self._roundType = event.roundType;

-- end

function battleLogic:onHandleRecord(event)
	
	if self._battlePlayer and event.data then

		self._battlePlayer:onHandelRecord(event.data);

	end

end

function battleLogic:onHandleMoveGemEnd( ... )

	if self._gemInputHandler then
	
		self._gemInputHandler:releaseMoveLock();
			
	end

end

function battleLogic:onHandleInitBattle(event)

	self._attackHero:setHP(event.data.attacker.hp);
	self._attackHero:setMaxHP(event.data.attacker.maxHP);

	for i,v in ipairs(event.data.attacker.skillCards) do
		
		self._attackHero:addCard(v);

	end

	self._defenceHero:setHP(event.data.defender.hp);
	self._defenceHero:setMaxHP(event.data.defender.maxHP);

	for i,v in ipairs(event.data.defender.skillCards) do
		
		self._defenceHero:addCard(v);

	end

	if self._skillLogic then

		self._skillLogic:onHandleInitBattle(event);


	end

end

function battleLogic:onHandleMoveGem( event )
	
	self._gemsLogic:onSwapGems(event);

end

function battleLogic:onTouchDown( position )
	

	if self._gemInputHandler and not self:getErasedFlag() then
	
		self._gemInputHandler:onTouchDown(position);

	end

	if self._skillInputHandler then
	
		self._skillInputHandler:onTouchDown(position);

	end

end

function battleLogic:onTouchMove( position )
	

	if self._gemInputHandler and not self:getErasedFlag() then
		
		self._gemInputHandler:onTouchMove(position);

	end

	if self._skillInputHandler then
	
		self._skillInputHandler:onTouchMove(position);
		
	end

end

function battleLogic:onTouchUp( position )
	
	if self._gemInputHandler and not self:getErasedFlag() then
	
		self._gemInputHandler:onTouchUp(position);

	end

	if self._skillInputHandler then
	
		self._skillInputHandler:onTouchUp(position);
		
	end

end

function battleLogic:tick( )

	if self._battlePlayer then
	
		self._battlePlayer:tick();

	end


end

function battleLogic:onHandelCastSkillSelectGem(event)
	
	if self._skillInputHandler then
	
		self._skillInputHandler:setWaitForSelectGem(event.data);
	
	end
end

function battleLogic:onCastSkill( skillID )
	
	if self._skillLogic then

		self._skillLogic:onSelectSkill(skillID);

	end

end

function battleLogic:onCastSelectGemSkill( )
	
	if self._skillLogic and self._skillInputHandler then
		
		local touchGem = self._skillInputHandler:getTouchGem();

		if touchGem then
			self._skillLogic:onCastSelectGemSkill(touchGem:getColumn(), touchGem:getRow());
		end

	end

end
