battleLogic = class("battleLogic")

function battleLogic:ctor()
	
	-- gems logic and input handle
	self._gemsLogic = gemsLogic.new();
	self._gemInputHandler = gemInputHandler.new(self._gemsLogic);

	-- register event
	self:registerEvent();

	-- hero object
	self._attackHero = heroObject.new();

	self._defenceHero = heroObject.new();

	-- battle player

	self._battlePlayer = battlePlayer.new();

	--
	self._roundType = enum.BATTLE_ROUND_TYPE.NONE;

	-- erase flag, to check if can end round
	self._erasedFlag = false;

end

function battleLogic:getErasedFlag()

	-- can player end round
	-- must do one time erase
	return self._erasedFlag;
end

function battleLogic:setErasedFlag(flag)
	
	self._erasedFlag = flag;

end

function battleLogic:getRoundType()

	return self._roundType;

end

function battleLogic:setRoundType(roundType)

	self._roundType = roundType;

end

function battleLogic:destroy( ... )
	
	if self._battlePlayer then
		
		self._battlePlayer:destroy();

		self._battlePlayer = nil;

	end


	if self._gemsLogic then
	
		self._gemsLogic:destroy();

		self._gemsLogic = nil;

	end

	if self._attackHero then
	
		self._attackHero:destroy();

		self._attackHero = nil;

	end

	if self._defenceHero then

		self._defenceHero:destroy();

		self._defenceHero = nil;

	end

	if self._gemInputHandler then
	
		self._gemInputHandler:destroy();

		self._gemInputHandler = nil;

	end

	self:removeAllEvent();

end

function battleLogic:registerEvent()
	
	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle, self);
	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_SWAP_GEM, self.onHandleMoveGem, self);

	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END, self.onHandleMoveGemEnd, self);

	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_PLAYER_RECORD, self.onHandleRecord, self);

end

function battleLogic:removeAllEvent()

	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle);
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_SWAP_GEM, self.onHandleMoveGem);

	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END, self.onHandleMoveGemEnd);
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_PLAYER_RECORD, self.onHandleRecord);

end

function battleLogic:onHandleRoundType(event)
	
	self._roundType = event.roundType;

	print("onHandleRoundType battleLogic "..self._roundType);

end

function battleLogic:onHandleRecord(event)
	
	if self._battlePlayer and event.data then

		self._battlePlayer:onHandelRecord(event.data);

	end

end

function battleLogic:onHandleMoveGemEnd( ... )

	if self._gemInputHandler then
	
		self._gemInputHandler:releaseMoveLock();
			
	end

end

function battleLogic:onHandleInitBattle( )

	-- test data
	self._attackHero:setHP(100);
	self._defenceHero:setHP(100);


end

function battleLogic:onHandleMoveGem( event )
	
	self._gemsLogic:onSwapGems(event);

end

function battleLogic:onTouchDown( position )
	

	if self._gemInputHandler and not self:getErasedFlag() then
	
		self._gemInputHandler:onTouchDown(position);

	end

end

function battleLogic:onTouchMove( position )
	

	if self._gemInputHandler and not self:getErasedFlag() then
		
		self._gemInputHandler:onTouchMove(position);

	end

end

function battleLogic:onTouchUp( position )
	
	if self._gemInputHandler and not self:getErasedFlag() then
	
		self._gemInputHandler:onTouchUp(position);

	end
end

function battleLogic:tick( )

	if self._battlePlayer then
	
		self._battlePlayer:tick();

	end


end
