-- 战斗播放器

battleRecordGemErase = class("battleRecordGemErase", battleRecordBase)

function battleRecordGemErase:ctor(data)

	battleRecordGemErase.super.ctor(self, data);

end

function battleRecordGemErase:destroy( ... )

end

function battleRecordGemErase:tick()


end

function battleRecordGemErase:onStart( ... )
	-- body

	local data = self._data;

	local sceneUserData = sceneManager.currentScene:userData();
	local gemsLogic = sceneUserData.gemsLogic;
	local gemsData = gemsLogic:getGemsData();

	local eraseCount = table.nums(data.eraseList);
	local erasedCount = 0;

	for k, erasePosition in pairs(data.eraseList) do
		
		local gemObject = gemsLogic:getGemObject(erasePosition.x, erasePosition.y);
		
		-- modify hero gems count
		local gemType = gemsData:getData()[erasePosition.x][erasePosition.y];
		
		if sceneUserData.battleLogic:getRoundType() == enum.BATTLE_ROUND_TYPE.ATTACKER then
			
			sceneUserData.attackHero:modifyGems(gemType, 1);

		elseif sceneUserData.battleLogic:getRoundType() == enum.BATTLE_ROUND_TYPE.DEFENDER then
			
			sceneUserData.defenceHero:modifyGems(gemType, 1);

		end


		gemObject:playErase(function( )
			
			erasedCount = erasedCount + 1;

			if erasedCount == eraseCount then
			
				self:endRecord();

			end

		end);

	end

end

function battleRecordGemErase:onEnd( ... )
	
	-- notify ui update
	eventManager.postEvent({ name = global_uiEvent.EVENT_UI_BATTLEVIEW_UPDATE });

end
