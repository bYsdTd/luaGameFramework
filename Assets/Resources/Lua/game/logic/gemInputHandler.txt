gemInputHandler = class("gemInputHandler")

function gemInputHandler:ctor( gemsLogic )

	self._touchDownPosition = nil;

	self._touchGem = nil;

	self._gemsLogic = gemsLogic;

	-- move lock, only can move one,  one times
	-- wait for animation complete
	self._moveLock = false;

end

function gemInputHandler:destroy( ... )
	-- body
end

function gemInputHandler:onTouchDown( position )
	
	self._touchDownPosition = position;

	-- find the gem, check if touch one gem
	if self._gemsLogic then
	
		self._touchGem = self._gemsLogic:getHitGem(position);

	end

end

function gemInputHandler:onTouchMove( position )

	if self._touchDownPosition and self._touchGem and not self._moveLock then
	
		local delta = position - self._touchDownPosition;

		if delta.sqrMagnitude > 50 then

			local angel = UnityEngine.Vector2.Angle(UnityEngine.Vector2.up, delta);

			self._moveLock = true;

			local moveDirection = enum.MOVE_GEM_DIRECTION.NONE;

			if delta.x > 0 then
			
				-- right
				if angel >=0 and angel < 45 then
				
				-- up
					moveDirection = enum.MOVE_GEM_DIRECTION.UP;

				elseif angel >= 45 and angel < 135 then
				-- right
					
					moveDirection = enum.MOVE_GEM_DIRECTION.RIGHT;
					
				else
				-- down
					moveDirection = enum.MOVE_GEM_DIRECTION.DOWN;

				end

			else
			
				-- left

				if angel >=0 and angel < 45 then
				
				-- up
					moveDirection = enum.MOVE_GEM_DIRECTION.UP;


				elseif angel >= 45 and angel < 135 then
				-- left
					
					moveDirection = enum.MOVE_GEM_DIRECTION.LEFT;

				else
				-- down
					
					moveDirection = enum.MOVE_GEM_DIRECTION.DOWN;

				end

			end

			eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_SWAP_GEM, dir = moveDirection, touchGem = self._touchGem});

		end

	end

end

function gemInputHandler:onTouchUp( position )


	if self._touchDownPosition then
		
		self._touchDownPosition = nil;

	end

	if self._touchGem then
	
		self._touchGem = nil;

	end

end

function gemInputHandler:releaseMoveLock( )
	
	self._moveLock = false;

end
