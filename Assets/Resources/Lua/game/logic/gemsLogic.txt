gemsLogic = class("gemsLogic")

GEMS_LOGIC_GEMS_ROW = 7;
GEMS_LOGIC_GEMS_COLUMN = 7;
GEMS_LOGIC_GEMS_TYPE = 5;

function gemsLogic:ctor()
	
	self._gemsData = nil;

	self._gemsObjects = {};

	self:registerEvent();

	self._gemsRoot = nil;

end

function gemsLogic:onHandleInitBattle(event)		

	self._gemsData = gemsData.new(event.data.w, event.data.h, event.data.gemType);

	self._gemsData:setData(event.data.data);

	self:initGemObjects();

end

function gemsLogic:registerEvent()

	eventManager.addEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle, self);

end

function gemsLogic:removeAllEvent()
	
	eventManager.removeEvent(EVENT_ID.EVENT_BATTLE_INIT, self.onHandleInitBattle);

end


function gemsLogic:getGemsRoot( ... )

	return self._gemsRoot;

end

function gemsLogic:getGemsData( ... )
		
	return self._gemsData;

end

function gemsLogic:getGemObject(column, row)

	local index = self:getGemsData():getIndexByPos(column, row);
	local gemObject = self._gemsObjects[index];
	
	return gemObject;
end

function gemsLogic:updateAllGemObject(gemsData)

	self._gemsData:setData(gemsData);

	local data = self._gemsData:getData();
	local w = self._gemsData:getWidth();
	local h = self._gemsData:getHeight();

	for column = 1, w do
		
		for row = 1, h do
		
			local index = self:getGemsData():getIndexByPos(column, row);

			local gemInstance =	self._gemsObjects[index];

			gemInstance:setType(data[column][row]);

		end

	end

end

function gemsLogic:initGemObjects( )

	self._gemsRoot = UnityEngine.GameObject("gemsRoot");
	
	self._gemsRoot.transform:SetSiblingIndex(2);

	utils.addChild(layoutManager.rootCanvas, self._gemsRoot );

	local data = self._gemsData:getData();
	local w = self._gemsData:getWidth();
	local h = self._gemsData:getHeight();

	for column = 1, w do
		
		for row = 1, h do
		
			local index = self:getGemsData():getIndexByPos(column, row);

			local gemInstance = gemObject.new(column, row, data[column][row], self._gemsRoot);

			self._gemsObjects[index] = gemInstance;

		end

	end

end

-- handle user input
function gemsLogic:onSwapGems(event)

	local moveGem = event.touchGem;
	local moveDir = event.dir;

	local column = moveGem:getColumn();
	local row = moveGem:getRow();

	if (moveDir == enum.MOVE_GEM_DIRECTION.UP and row == 1 )
		or (moveDir == enum.MOVE_GEM_DIRECTION.DOWN and row == self._gemsData:getHeight() ) 
		or (moveDir == enum.MOVE_GEM_DIRECTION.LEFT and column == 1 ) 
		or (moveDir == enum.MOVE_GEM_DIRECTION.RIGHT and column == self._gemsData:getWidth() ) then

		eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END});

		return;
	end

	local targetColumn = column;
	local targetRow = row;

	if moveDir == enum.MOVE_GEM_DIRECTION.UP then
		
		targetRow = targetRow - 1;

	elseif moveDir == enum.MOVE_GEM_DIRECTION.DOWN then
		
		targetRow = targetRow + 1;

	elseif moveDir == enum.MOVE_GEM_DIRECTION.LEFT then
		
		targetColumn = targetColumn - 1;

	elseif moveDir == enum.MOVE_GEM_DIRECTION.RIGHT then
		
		targetColumn = targetColumn + 1;

	end

	--print(" swap "..column.." "..row.." to "..targetColumn.." "..targetRow);


	local gemsDataClone = clone(self._gemsData);
	gemsDataClone:swap(column, row, targetColumn, targetRow);

	local eraseList = gemsDataClone:checkEraseList();

	if #eraseList == 0 then

		-- can not erase, just play

		eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_PLAYER_RECORD,  data = {

				recordType = enum.BATTLE_RECORD_TYPE.SWAP,
				column = column,
				row = row,
				targetColumn = targetColumn,
				targetRow = targetRow,

			}});

		eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_PLAYER_RECORD,  data = {

				recordType = enum.BATTLE_RECORD_TYPE.SWAP,
				column = targetColumn,
				row = targetRow,
				targetColumn = column,
				targetRow = row,

				endCallback = function ( ... )
					
					eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_PLAYER_SWAP_END});

				end
			}});
	
	else

		-- client swap first, data also need to swap
		self._gemsData:swap(column, row, targetColumn, targetRow);

		eventManager.postEvent({name = EVENT_ID.EVENT_BATTLE_PLAYER_RECORD,  data = {

				recordType = enum.BATTLE_RECORD_TYPE.SWAP,
				column = column,
				row = row,
				targetColumn = targetColumn,
				targetRow = targetRow,

			}});

		-- send to server and wait erase result
		local data = {};
		data.column = column;
		data.row = row;
		data.targetColumn = targetColumn;
		data.targetRow = targetRow;

		networkManager.send(GLOBAL_PACKET_ID.BATTLE_SWAP_GEMS, data);

		-- can end erase
		sceneManager.currentScene:userData().battleLogic:setErasedFlag(true);
	end

end

--  position is screen position
function gemsLogic:getHitGem( position )

	for k, v in pairs(self._gemsObjects) do
		
		if v:isHit(position) then
		
			return v;

		end
	end

	return nil;
end

function gemsLogic:destroy( )
	
	self:removeAllEvent();

	if self._gemsData then
		
		self._gemsData:destroy();

		self._gemsData = nil;

	end

	for k,v in pairs(self._gemsObjects) do
		

		v:destroy();

	end

	self._gemsObjects = {};

	if 	self._gemsRoot then
	
		UnityEngine.GameObject.Destroy(self._gemsRoot);

		self._gemsRoot = nil;

	end

end
