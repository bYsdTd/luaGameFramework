gemsData = class("gemsData");

-- w, h, blockTypes all int type
function gemsData:ctor(w, h, blockTypes)

	self._w = w;
	self._h = h;
	self._blockTyps = blockTypes;
	
	self._data = {};
	
	-- i 是 行，j 是 列
	for i=1, h do
		
		for j=1, w do
					
			self._data[j] = self._data[j] or {};
			
			self._data[j][i] = self._data[j][i] or 0;
			
		end
	
	end
	
end

function gemsData:destroy( ... )
	-- body
end

function gemsData:getWidth()
	return self._w;
end

function gemsData:getHeight()
	return self._h;
end

function gemsData:getBlockTypes()
	return self._blockTyps;
end

-- from server data
function gemsData:setData(data)
	
	self._data = data;

end

function gemsData:setDataByPosition(column, row, gemType)
	
	self._data[column][row] = gemType;
	
end

function gemsData:getDataByPosition(column, row )
	
	return self._data[column][row];	
end

function gemsData:getData()
	return self._data;
end

-- row column return index from 1 to w * h
function gemsData:getIndexByPos(column, row)
	local k = (row-1) * self._w + column;
	
	return k;
end

-- index return row , column
function gemsData:getPosByIndex(k)
	-- local k = (i-1) * self._w + j;
	
	local column = math.fmod(k-1, self._w) + 1; -- x 第几列
	
	local row = math.floor((k - 1) / self._w) + 1; -- y 第几行
	
	return column, row;
end

-- init the data, not have can erased
function gemsData:generate()
	
	-- function isTypeExist(typeValue, list)
	-- 	for k, v in pairs(list) do
	-- 		if v == typeValue then
	-- 			return true;
	-- 		end
	-- 	end
		
	-- 	return false;
	-- end
	
	math.randomseed(os.time());
	
	for i=1, self._h do
		
		for j=1, self._w do
			
			-- local exceptTypes = {};
			
			-- if j > 2 and self._data[j-1][i] == self._data[j-2][i] then
			-- 	-- 比较横排的前面有没有相同的
			-- 	table.insert(exceptTypes, self._data[j-1][i]);
			-- end
			
			-- if i > 2 and self._data[j][i-1]== self._data[j][i-2] then
			-- 	table.insert(exceptTypes, self._data[j][i-1]);
			-- end
			
			-- local validTypes = {};
			-- for i=1, self._blockTyps do
			
			-- 	if not isTypeExist(i, exceptTypes) then
			-- 			table.insert(validTypes, i);
			-- 	end
				
			-- end
			
			-- local randomCount = #validTypes;
			
			-- if randomCount == 0 then
			-- 	return false;
			-- end
			
			-- local randomKey = math.random(1, randomCount);
			self._data[j][i] = self:getNoneDuplicateGem(j, i);
			
		end
		
	end
	
end

function gemsData:swap(x1, y1, x2, y2)
	
	if self._data[x1][y1] and self._data[x2][y2] then
	
		self._data[x1][y1], self._data[x2][y2] = self._data[x2][y2], self._data[x1][y1];
	
	end
	
end

-- -- 检查连线，3， 4 ，5个？
-- function gemsData:checkThree()

-- 	-- erasegemsData 的 local k = (i-1) * self._w + j;
	
-- 	local eraseBlocks = {};
	
-- 	local hasErase = false;
	
-- 	-- get all erased gems

-- 	for i=1, self._h do
		
-- 		for j=1, self._w do
			
-- 			local k = self:getIndexByPos(j, i);
-- 			local currentBlock = self._data[j][i];
			
-- 			eraseBlocks[k] = {row = false, col = false};
			
-- 			-- check row
-- 			if j > 2 and self._data[j-1][i] == self._data[j-2][i] and self._data[j-1][i] == currentBlock then 
-- 				eraseBlocks[k] = { row = true, col = eraseBlocks[k].col };
-- 				eraseBlocks[k-1] = { row = true, col = eraseBlocks[k-1].col };
-- 				eraseBlocks[k-2] = { row = true, col = eraseBlocks[k-2].col };
-- 				--print("row "..j.." "..i.." k "..k);
				
-- 				hasErase = true;
-- 			end
			
-- 			-- check column
-- 			if i > 2 and self._data[j][i-1] == self._data[j][i-2] and self._data[j][i-1] == currentBlock then
-- 				eraseBlocks[k] = { row = eraseBlocks[k].row, col = true };
-- 				eraseBlocks[k-self._w] = { row = eraseBlocks[k-self._w].row, col = true };
-- 				eraseBlocks[k-self._w-self._w] = { row = eraseBlocks[k-self._w-self._w].row, col = true };
-- 				hasErase = true;
-- 				--print("column "..j.." "..i.." k "..k);
-- 			end
			
-- 		end
		
-- 	end
	
	
-- 	local moveHandledList = {};
-- 	local moveList = {};
	
-- 	for k, v in ipairs(eraseBlocks) do
		
-- 		local j, i = self:getPosByIndex(k);
		

-- 		-- local typeInfo = "";
-- 		-- if v.row then
-- 		-- 	typeInfo = typeInfo.." row ";
-- 		-- end
		
-- 		-- if v.col then
-- 		-- 	typeInfo = typeInfo.." col ";
-- 		-- end
		
-- 		-- if v.row or v.col then
-- 		-- 	print("k "..k.." j "..j.." i "..i..typeInfo);
-- 		-- end
		
-- 		-- 同时生成移动的列表
-- 		if (v.row or v.col) and moveHandledList[k] == nil then
			
-- 			moveHandledList[k] = true;
			
-- 			-- 消除的是第j列的，x坐标是j，那么遍历这一列的所有
-- 			-- 计算出每个块的移动
-- 			local move = 0;
-- 			for rowindex=self._h, 1, -1 do
-- 				local tempkey = self:getIndexByPos(j, rowindex);
-- 				--print("handle "..j.." "..rowindex.." tempkey "..tempkey);
-- 				if eraseBlocks[tempkey].row or eraseBlocks[tempkey].col then
-- 					-- 如果是消除的当前移动加1
-- 					move = move + 1;
-- 					moveHandledList[tempkey] = true;
-- 				else
-- 					-- 不消除的就移动当前的move
-- 					if move > 0 then
-- 						-- 保存的是移动后的x， y
-- 						table.insert(moveList, {x=j, y = rowindex + move, move = move});
-- 						--print("1-- x "..j.." y "..(rowindex+move).." move "..move);
-- 					end
-- 				end
-- 			end
			
-- 			-- 还有其他的多生成的移动的等于最后的一个move的
-- 			for genNew = 1, move do
-- 				table.insert(moveList, {x=j, y = genNew, move = move});
-- 				--print("new-- x "..j.." y "..genNew.." move "..move);
-- 			end
			
			
-- 			--table.insert();
-- 		end
				
-- 	end
	
-- 	--[[
-- 	-- debug log
-- 	for movekey, movevalue in ipairs(moveList) do
-- 		print(" x "..movevalue.x.." y "..movevalue.y.." move "..movevalue.move);
-- 	end
-- 	--]]
	
-- 	-- 返回消除的block的位置坐标, 没有的话返回nil
-- 	if hasErase then
		
-- 		-- k to pos
-- 		local poslist = {};
-- 		for k, v in ipairs(eraseBlocks) do
-- 			if v.row or v.col then
-- 				local x, y = self:getPosByIndex(k);
				
-- 				table.insert(poslist, {x = x, y = y});
-- 			end
-- 		end
		
-- 		return poslist, moveList;
-- 	else
-- 		return nil;
-- 	end
	
-- end


-- -- 消除可以消除的，根据消除的数量生成新的gemsData，然后在做相应的移动
-- function gemsData:eraseAndGen(poslist)
	
-- 	for k, v in ipairs(poslist) do

-- 		local x, y = v.x, v.y;
				
-- 		for i=y, 1, -1 do
-- 			if i == 1 then
-- 				-- gen new
-- 				self._data[x][i] = math.random(1, self._blockTyps);
-- 			else
			
-- 				self._data[x][i] = self._data[x][i-1];
-- 			end
			
-- 		end
					
-- 	end
		
-- end

-- here is the general erase rules
-- return the erase position list
function gemsData:checkEraseList()

	local eraseIndexList = {};

	for row = 1, self:getHeight() do
	
		for column = 1, self:getWidth() do
			
			local gemIndex = self:getIndexByPos(column, row);
			local gemType = self:getData()[column][row];

			eraseIndexList[gemIndex] = false;

			-- check row
			if column > 2 
				and self:getDataByPosition(column-1, row) == self:getDataByPosition(column-2, row) 
				and self:getDataByPosition(column-1, row) == self:getDataByPosition(column, row) then 
				
				eraseIndexList[gemIndex] = true;
				eraseIndexList[gemIndex-1] = true;
				eraseIndexList[gemIndex-2] = true;

			end
			
			-- check column
			if row > 2 
				and self:getDataByPosition(column, row-1) == self:getDataByPosition(column, row-2)
				and self:getDataByPosition(column, row-1) == self:getDataByPosition(column, row) then

				eraseIndexList[gemIndex] = true;
				eraseIndexList[gemIndex-self:getWidth()] = true;
				eraseIndexList[gemIndex-self:getWidth()-self:getWidth()] = true;
		
			end
		end

	end

	-- gem index to column and row

		
	local poslist = {};
	for k, v in ipairs(eraseIndexList) do
		
		if v then
			
			local column, row = self:getPosByIndex(k);
			
			table.insert(poslist, {x = column, y = row});
		end
	end
	
	return poslist;

end

function gemsData:generateMoveList(eraseList)

	local erasedData = {};

	local totalIndex = self:getWidth() * self:getHeight();

	for gemIndex = 1, totalIndex do
		
		erasedData[gemIndex] = false;
	
	end

	for k,v in pairs(eraseList) do
		
		local gemIndex = self:getIndexByPos(v.x, v.y);

		erasedData[gemIndex] = true;

	end


	local moveHandledList = {};
	local moveList = {};
	
	for k, v in ipairs(erasedData) do
		
		local j, i = self:getPosByIndex(k);
		
		-- 同时生成移动的列表
		if v and moveHandledList[k] == nil then
			
			moveHandledList[k] = true;
			
			-- 消除的是第j列的，x坐标是j，那么遍历这一列的所有
			-- 计算出每个块的移动
			local move = 0;
			for rowindex=self._h, 1, -1 do
				local tempkey = self:getIndexByPos(j, rowindex);
				
				if erasedData[tempkey] then
					-- 如果是消除的当前移动加1
					move = move + 1;
					moveHandledList[tempkey] = true;
				else
					-- 不消除的就移动当前的move
					if move > 0 then
						-- 保存的是移动后的x， y
						table.insert(moveList, {x=j, y = rowindex + move, move = move});
					end
				end
			end
			
			-- 还有其他的多生成的移动的等于最后的一个move的
			for genNew = 1, move do
				table.insert(moveList, {x=j, y = genNew, move = move});
			end
		
		end
				
	end

	return moveList;

end

-- step 1:
-- only erase, do not generate new and drop
-- erase gem set to 0
function gemsData:eraseOnly(eraseList)
	
	for k, erasePosition in ipairs(eraseList) do
		
		self:setDataByPosition(erasePosition.x, erasePosition.y, 0);

	end

end

-- step 2:
-- drop only
-- after erase, some gem change to 0, and drop the needed
function gemsData:dropOnly()

	-- check 0 gem, add to erase List
	local eraseList = {};
	for row = 1, self:getHeight() do
	
		for column = 1, self:getWidth() do
		
			if self:getDataByPosition(column, row) == 0 then

				table.insert(eraseList, {x = column, y = row});

			end
		end

	end

	-- moveList
	local moveList = self:generateMoveList(eraseList);

	-- from the bottom line
	-- check drop gem
	for row = 1, self:getHeight() do
	
		for column = 1, self:getWidth() do
		
			if self:getDataByPosition(column, row) == 0 then

				for dropRow = row, 1, -1 do
					
					if dropRow == 1 then
					
						self:setDataByPosition(column, dropRow, 0);

					else

						local gemTypeAbove = self:getDataByPosition(column, dropRow-1);

						self:setDataByPosition(column, dropRow, gemTypeAbove);

					end
				end

			end

		end

	end

	return moveList;

end

function gemsData:getNoneDuplicateGem(column, row)
	

	function isTypeExist(typeValue, list)
		for k, v in pairs(list) do
			if v == typeValue then
				return true;
			end
		end
		
		return false;
	end

	local exceptTypes = {};
			
	if (column > 2 and self._data[column-1][row] == self._data[column-2][row]) then

		table.insert(exceptTypes, self._data[column-1][row]);

	elseif (column > 1 and (column + 1) <= self:getWidth() and self._data[column-1][row] == self._data[column+1][row]) then
		
		table.insert(exceptTypes, self._data[column-1][row]);

	elseif ( (column + 2) <= self:getWidth() and self._data[column+1][row] == self._data[column+2][row]) then
		
		-- 比较横排的前面有没有相同的
		table.insert(exceptTypes, self._data[column+1][row]);
	end
			
	if row > 2 and self._data[column][row-1]== self._data[column][row-2] then
		
		table.insert(exceptTypes, self._data[column][row-1]);
	elseif (row > 1 and (row + 1) <= self:getHeight() and self._data[column][row-1] == self._data[column][row+1]) then

		table.insert(exceptTypes, self._data[column][row+1]);

	elseif ((row + 2) <= self:getHeight() and self._data[column][row+1] == self._data[column][row+2]) then

		table.insert(exceptTypes, self._data[column][row+1]);

	end
			
	local validTypes = {};
	for i=1, self._blockTyps do
	
		if not isTypeExist(i, exceptTypes) then
			table.insert(validTypes, i);
		end
				
	end
			
	local randomCount = #validTypes;
			
	if randomCount == 0 then
		return 0;
	end
			
	local randomKey = math.random(1, randomCount);

	return validTypes[randomKey];

end

-- step 3:
-- generate new and drop
function gemsData:generateAndDrop( )

	local moveList = {};

	for column = 1, self:getWidth() do
		
		local moveSteps = 0;

		for row = 1, self:getHeight() do
		
			if self:getDataByPosition(column, row) == 0 then
			
				--local newGemType = math.random(1, self._blockTyps);

				local newGemType = self:getNoneDuplicateGem(column, row);

				self:setDataByPosition(column, row, newGemType);

				moveSteps = moveSteps + 1;

				table.insert(moveList, {x = column, y = row, move = 0});
			end

		end

		-- final ,set all move in this column to moveSteps
		for k,v in pairs(moveList) do
			
			if v.x == column then
				v.move = moveSteps;
			end
		end
	end

	return moveList;
end

-- return move list
function gemsData:eraseByEraseList(eraseList)

	-- generate new data
	for k, erasePosition in ipairs(eraseList) do
		
		for row = erasePosition.y, 1, -1 do

			if row == 1 then
				-- gen new
				local newGemType = math.random(1, self._blockTyps);

				self:setDataByPosition(erasePosition.x, row, newGemType);

			else
			
				local gemTypeAbove = self:getDataByPosition(erasePosition.x, row-1);
				
				self:setDataByPosition(erasePosition.x, row, gemTypeAbove);

			end

		end
					
	end

	-- generate move list

	local moveList = self:generateMoveList(eraseList);

	return moveList;
end

-- 打印block
function gemsData:printBlocks(poslist)
	local debuginfo = "\n";
	
	for i=1, self._h do
		
		for j=1, self._w do
			
			local inlist = false;
			if poslist then
				for k,v in pairs(poslist) do
					if v.x == j and v.y == i then
						inlist = true;
						break;
					end
				end
			end
			
			if not inlist then
				debuginfo = debuginfo..self._data[j][i].." ";
			else
				debuginfo = debuginfo.."*"..self._data[j][i].." ";
			end
		end
		
		--debuginfo = debuginfo.."\n";
		print(debuginfo);
		debuginfo = "";
	end
	
	--print(debuginfo);
	
end
