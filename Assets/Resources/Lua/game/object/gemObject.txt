gemObject = class("gemObject")

local colorMap = 
{
	[1] = UnityEngine.Color.red;	
	[2] = UnityEngine.Color.green;
	[3] = UnityEngine.Color.blue;
	[4] = UnityEngine.Color.yellow;
	[5] = UnityEngine.Color.cyan;
	[6] = UnityEngine.Color.magenta;
	[7] = UnityEngine.Color.white;
};

function gemObject:ctor(column, row, gemType, rootObject)
	
	self._column = column;
	self._row = row;
	self._gemType = gemType;

	self._gemsRoot = rootObject;

	-- init from prefab
	self._gameobj = UnityEngine.GameObject("gem");
	self._imageCom = self._gameobj:AddComponent(UnityEngine.UI.Image);

	self._rectCom = self._gameobj:GetComponent(UnityEngine.RectTransform);
	self._imageCom.color = colorMap[self._gemType];

	utils.addChild(self._gemsRoot, self._gameobj );

	-- init postion
	local canvasSize = layoutManager.getCanvasSize();
	local gemSize = canvasSize.y / GEMS_LOGIC_GEMS_ROW;
	local xoffset = (canvasSize.x - gemSize * GEMS_LOGIC_GEMS_COLUMN)/2;

	self._rectCom.pivot = UnityEngine.Vector2(0, 1);
	self._rectCom.anchoredPosition = gemObject.getPositionByColRow(self._column, self._row);
	self._rectCom.sizeDelta = UnityEngine.Vector2(gemSize-5, gemSize-5);

end

function gemObject.getColorMap()

	return colorMap;
	
end

function gemObject.getGemSize()
	
	local canvasSize = layoutManager.getCanvasSize();
	local gemSize = canvasSize.y / GEMS_LOGIC_GEMS_ROW;

	return gemSize;
end

function gemObject.getPositionByColRow(column, row)
	
	local canvasSize = layoutManager.getCanvasSize();
	local gemSize = canvasSize.y / GEMS_LOGIC_GEMS_ROW;
	local xoffset = (canvasSize.x - gemSize * GEMS_LOGIC_GEMS_COLUMN)/2;

	return UnityEngine.Vector2(xoffset + (column-1)*gemSize, canvasSize.y - (row - 1)*gemSize);

end

function gemObject:destroy()

	if self._gameobj then
		
		UnityEngine.GameObject.Destroy(self._gameobj);
		
		self._gameobj = nil;

	end


end

-- check if touch the gem, position is screen position
function gemObject:isHit( position )
	
	if self._rectCom then

		return UnityEngine.RectTransformUtility.RectangleContainsScreenPoint(self._rectCom, position);

	else

		return false;

	end
end

function gemObject:getColumn( ... )
	
	return self._column;

end

function gemObject:getRow( ... )
	
	return self._row;

end

function gemObject:setColumn( column )
	
	self._column = column;

end

function gemObject:setRow( row )
	
	self._row = row;

end

function gemObject:setType( gemType )

	self._gemType = gemType;

	if self._imageCom then
	
		self._imageCom.color = colorMap[self._gemType];

	end

end


function gemObject:playErase( callback )

	local eraseTime = 1.5;
	local startTime = UnityEngine.Time.time;

	LuaTimer.Add(1, 1, function(id)
		
		local elapsedTime = UnityEngine.Time.time - startTime;

		if elapsedTime >= eraseTime then
			-- end

			if self._imageCom then
				
				local color = self._imageCom.color;

				self._imageCom.color = UnityEngine.Color(color.r, color.g, color.b, 0);

			end

			LuaTimer.Delete(id);

			if callback then
				
				callback();

			end

		else

			local alpha = 1 - elapsedTime / eraseTime;

			local color = self._imageCom.color;
			self._imageCom.color = UnityEngine.Color(color.r, color.g, color.b, alpha);

		end

	end);
end

function gemObject:playMove(startPosition, endPosition, callback)
	
	local moveDistance = endPosition - startPosition;

	local moveTime =  moveDistance.magnitude / gemObject.getGemSize() * 0.3;
	local startTime = UnityEngine.Time.time;

	self._rectCom.anchoredPosition = startPosition;

	LuaTimer.Add(0, 1, function(id)
		
		local elapsedTime = UnityEngine.Time.time - startTime;

		if elapsedTime >= moveTime then
			-- end
			if self._rectCom then

				self._rectCom.anchoredPosition = endPosition;

			end
			
			LuaTimer.Delete(id);

			if callback then
				
				callback();

			end

		else

			local pos = startPosition + (endPosition - startPosition) * elapsedTime / moveTime;

			self._rectCom.anchoredPosition = pos;

		end

	end);

end

