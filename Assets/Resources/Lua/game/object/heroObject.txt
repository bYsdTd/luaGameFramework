heroObject = class("heroObject")

function heroObject:ctor()

	self._hp = 0;
	self._maxHP = 0;

	self._gems = {};

	for i=1, GEMS_LOGIC_GEMS_TYPE do
		
		self._gems[i] = 0;

	end

	self._skillCards = {};

end

function heroObject:destroy()


end

function heroObject:setHP( hp )
	
	self._hp = hp;

end

function heroObject:getHP( )
	
	return self._hp;

end

function heroObject:getMaxHP()
	
	return self._maxHP;

end

function heroObject:setMaxHP( maxHP)
	
	self._maxHP = maxHP;

end

function heroObject:setGems( gemType, gemValue )
	
	self._gems[gemType] = gemValue;

end

function heroObject:getGems( gemType )
	
	return self._gems[gemType];

end

function heroObject:getAttribute( attrType )
	
	if attrType == enum.HERO_ATTRIBUTE.HP then
		
		return self:getHP();

	elseif attrType == enum.HERO_ATTRIBUTE.GEM1 
		or attrType == enum.HERO_ATTRIBUTE.GEM2 
		or attrType == enum.HERO_ATTRIBUTE.GEM3
		or attrType == enum.HERO_ATTRIBUTE.GEM4 
		or attrType == enum.HERO_ATTRIBUTE.GEM5 then
	
		return self:getGems(attrType);

	end

end

function heroObject:changeAttribute( attrType, attrValue )
	
	local oldValue = self:getAttribute(attrType);
	local newValue = oldValue + attrValue;

	if newValue < 0 then
		
		newValue = 0;

	end

	if attrType == enum.HERO_ATTRIBUTE.HP then
		if newValue > PLAYERMAXHP then
			newValue = PLAYERMAXHP;
		end
	elseif attrType == enum.HERO_ATTRIBUTE.GEM1 
		or attrType == enum.HERO_ATTRIBUTE.GEM2 
		or attrType == enum.HERO_ATTRIBUTE.GEM3
		or attrType == enum.HERO_ATTRIBUTE.GEM4 
		or attrType == enum.HERO_ATTRIBUTE.GEM5 then
		if newValue > PLAYERMAXMP then
			newValue = PLAYERMAXMP;
		end
	end

	if attrType == enum.HERO_ATTRIBUTE.HP then
		
		self:setHP(newValue);

	elseif attrType == enum.HERO_ATTRIBUTE.GEM1 
		or attrType == enum.HERO_ATTRIBUTE.GEM2 
		or attrType == enum.HERO_ATTRIBUTE.GEM3
		or attrType == enum.HERO_ATTRIBUTE.GEM4 
		or attrType == enum.HERO_ATTRIBUTE.GEM5 then
	
		self:setGems(attrType, newValue);
	end

end

function heroObject:getCard( index )

	return self._skillCards[index];
end

function heroObject:addCard(skillID)
	
	local card = skillCard.new(skillID);

	table.insert(self._skillCards, card);

end

function heroObject:haveCard( skillID )

	for i,v in ipairs(self._skillCards) do

		if v:getSkillID() == skillID then
			
			return true;

		end

	end

	return false;

end

function heroObject:canCastSkill(cardIndex)

	local card = self:getCard(cardIndex);

	if not card then
		return false;
	end

	local config = card:getConfig();

	for i, v in ipairs(config.cost) do
		
		if self:getGems(i) < v then
		
			return false;

		end

	end

	return true;
end

function heroObject:deleteCard(skillID)
	
	local deleteIndex = -1;

	for i,v in ipairs(self._skillCards) do
		

		if v:getSkillID() == skillID then
			
			deleteIndex = i;
			break;

		end

	end

	if deleteIndex > 0 then

		table.remove(self._skillCards, deleteIndex);

	end

end
