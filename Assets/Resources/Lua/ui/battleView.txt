local battleView = class("battleView", layout);

-- event define
global_uiEvent.EVENT_UI_BATTLEVIEW_UPDATE = "EVENT_UI_BATTLEVIEW_UPDATE";

function battleView:ctor(layoutConig, event)

	battleView.super.ctor(self, layoutConig, event);

end

function battleView:onRegisterEvent()
	
	self:registerEvent(global_uiEvent.EVENT_UI_BATTLEVIEW_UPDATE, self.onUpdate);
	self:registerEvent(EVENT_ID.EVENT_BATTLE_ROUND_TYPE, self.onUpdateRoundType);


end

function  battleView:onShow(event)
	
	self.btnClose = uiTypeCast.toButton(self:getChild("btnClose"));
	
	self.btnClose.onClick:AddListener(function ()
		
		eventManager.postEvent({name = sceneManager.EVENT_SCENE_SWITCH_SCENE, sceneid = sceneManager.SCENE_ID.LOADING } );
		eventManager.postEvent({name = "EVENT_UI_BATTLEVIEW_HIDE", layoutIndex = self._layoutIndex } );
	end);

	self._btnLeftEndRound = uiTypeCast.toButton(self:getChild("btnLeftEndRound"));
	self._btnRightEndRound = uiTypeCast.toButton(self:getChild("btnRightEndRound"));

	self._btnLeftEndRound.onClick:AddListener(function( ... )
		
		-- left button end round
		networkManager.send( GLOBAL_PACKET_ID.BATTLE_END_ROUND, "left");

	end);

	self._btnRightEndRound.onClick:AddListener(function( ... )
		
		-- right button end round
		networkManager.send( GLOBAL_PACKET_ID.BATTLE_END_ROUND, "right" );

	end);

	self._imgLeftRoundTips = uiTypeCast.toImage(self:getChild("imgLeftRoundTips"));
	self._imgRightRoundTips = uiTypeCast.toImage(self:getChild("imgRightRoundTips"));

	self._imgLeftGems = {};
	self._lblLeftGemsCount = {};

	self._imgRightGems = {};
	self._lblRightGemsCount = {};

	for i=1, GEMS_LOGIC_GEMS_TYPE do
		
		self._imgLeftGems[i] = uiTypeCast.toImage(self:getChild("imgLeftGem"..i));
		self._imgLeftGems[i].color = gemObject.getColorMap()[i];

		self._lblLeftGemsCount[i] = uiTypeCast.toLable(self:getChild("lblLeftGem"..i.."Count"));
		self._lblLeftGemsCount[i].color = gemObject.getColorMap()[i];

		self._imgRightGems[i] = uiTypeCast.toImage(self:getChild("imgRightGem"..i));
		self._imgRightGems[i].color = gemObject.getColorMap()[i];

		self._lblRightGemsCount[i] = uiTypeCast.toLable(self:getChild("lblRightGem"..i.."Count"));
		self._lblRightGemsCount[i].color = gemObject.getColorMap()[i];
	end

	self._lblLeftHPNumber = uiTypeCast.toLable(self:getChild("lblLeftHPNumber"));
	self._lblRightHPNumber = uiTypeCast.toLable(self:getChild("lblRightHPNumber"));


	self:onUpdate();

end

function battleView:onUpdate(event)

	self:onUpdateRoundType();
	self:onUpdateHeroInfo();

end

function battleView:onUpdateHeroInfo()

	local sceneUserData = sceneManager.currentScene:userData();

	for i=1, GEMS_LOGIC_GEMS_TYPE do
		
		self._lblLeftGemsCount[i].text = sceneUserData.attackHero:getGems(i);
		self._lblRightGemsCount[i].text = sceneUserData.defenceHero:getGems(i);

	end

	self._lblLeftHPNumber.text = sceneUserData.attackHero:getHP() .. "/"..sceneUserData.attackHero:getMaxHP();
	self._lblRightHPNumber.text = sceneUserData.defenceHero:getHP() .. "/"..sceneUserData.defenceHero:getMaxHP();
	
end

function battleView:onUpdateRoundType(event)

	local sceneUserData = sceneManager.currentScene:userData();
	local battleLogic = sceneUserData.battleLogic;

	if battleLogic:getRoundType() == enum.BATTLE_ROUND_TYPE.ATTACKER then
		
		self._imgLeftRoundTips.color = UnityEngine.Color.green;
		self._imgRightRoundTips.color = UnityEngine.Color.red;

		self._btnLeftEndRound.interactable = battleLogic:getErasedFlag();
		self._btnRightEndRound.interactable = false;

	else
	
		self._imgLeftRoundTips.color = UnityEngine.Color.red;
		self._imgRightRoundTips.color = UnityEngine.Color.green;

		self._btnLeftEndRound.interactable = false;
		self._btnRightEndRound.interactable = battleLogic:getErasedFlag();

	end

end

return battleView;